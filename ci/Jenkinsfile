#!/usr/bin/env groovy

node() {
  try {
    setBuildStatus("Build running", "PENDING")
    stage('Checkout'){
      checkout scm
    }

    def gitHash = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
    def gitHashTag = "pmckenna25/roleplaying:$gitHash"
    def latestTag = "pmckenna25/roleplaying:latest"

    stage('Smoke test'){
      sh '/usr/local/bin/docker-compose build smoke'
      sh '/usr/local/bin/docker-compose run smoke'
      sh '/usr/local/bin/docker-compose down'
    }

    if (env.BRANCH_NAME == "master") {
      withCredentials([string(credentialsId: 'dockerpassword', variable: 'DOCKER_PASSWORD')]) {
        stage('Tag and Push to Docker Hub') {
          sh "docker build . -t $gitHashTag -t $latestTag"
          sh "docker login --username pmckenna25 --password $DOCKER_PASSWORD"
          sh "docker push $gitHashTag"
          sh "docker push $latestTag"
        }
      }
      stage('Package Helm Chart') {
        docker.image('alpine/helm:2.14.0').inside("--entrypoint='' -u 0:0") {
          sh """
          sed -E -i \
            -e 's/tag:.*/'"tag: '${gitHash}'"'/g' \
            "ci/helm/roleplaying/values.yaml"
          """
          sh "cat ci/helm/roleplaying/values.yaml"
          sh "helm package \
              --app-version='${gitHash}' \
              --save=false ci/helm/roleplaying"
          sh "helm inspect roleplaying-0.1.0.tgz"
        }
      }
    }
  } catch (error) {
    sh "/usr/local/bin/docker-compose down"
    setBuildStatus("Build failed", "FAILURE")
    throw error
  } finally {
    sh "docker volume prune -f"
  }
  setBuildStatus("Build succeeded", "SUCCESS")
}

void setBuildStatus(String message, String state) {
  step([
    $class: "GitHubCommitStatusSetter",
    reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/pmckenna25/nodejsWebAppGame"],
    contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "ci/jenkins/build-status"],
    errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
    statusResultSource: [$class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]]]
  ])
}
